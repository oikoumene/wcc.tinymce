/**
 * @author Artur Konstanczak
 * @copyright Copyright ï¿½ 2009, Fry-It, All rights reserved.
 */

//  -- example content generated by this plugin --
//  
//    <blockquote>
//      <p>The situation is volitile and highly unpredictable. 
//        <cite>ACT worker</cite>
//      </p>
//    </blockquote>
//    
//  </div>

(function() {
    // Load plugin specific language pack
    // tinymce.PluginManager.requireLangPack('flags');

    tinymce.create('tinymce.plugins.Quote', {

        _previousNode : null,

        /**
         * Initializes the plugin, this will be executed after the plugin has 
         * been created. This call is done before the editor instance has
         * finished it's initialization so use the onInit event
         * of the editor instance to intercept that event.
         *
         * @param {tinymce.Editor} ed Editor instance that the plugin is 
         * 		initialized in.
         * @param {string} url Absolute URL to where the plugin is located.
         */
        init : function(ed, url) 
        {
            var t = this;
            t.ed = ed
            t.url = url

            // Register commands
            ed.addCommand('mceInsertQuote', function() 
            {
                t._execCommand();
            });

            // Register image caption button
            ed.addButton('quote', 
            {
                title : 'Quote',
                cmd : 'mceInsertQuote',
                image : url + '/img/quote.gif'
            });

            ed.onNodeChange.add(this._nodeChange, this);
        },

        _execCommand : function() 
        {
        	var t = this;
        	ed = t.ed;
        	url = t.url;
        	
            sel = ed.selection.getNode();
            
             // insert only if you are inside image credit paragraph
            if (t._getImageCredit(sel))  
            {
                b = ed.selection.getBookmark();
            	
                blockquote = ed.dom.create('blockquote',{'class':'float-quote'});
                blockquote_p = ed.dom.create('p',
                	{}, 
                	'Please enter quote here.');
                blockquote_p_cite = ed.dom.create('cite',
                	{}, 
                	'ACT worker');
                
                blockquote.appendChild(blockquote_p);
                blockquote_p.appendChild(blockquote_p_cite);
                
                ed.dom.insertAfter(blockquote, sel);
                ed.selection.moveToBookmark(b);
            }
        },

        _nodeChange : function(ed, cm, n) 
        {
            // Check if active editor
            if (tinyMCE.activeEditor.id != ed.id) 
              return;
            // Set button state
            cm.setDisabled('quote', !this._getImageCredit(n));
        },
        
        _getImageCredit : function(e) 
        {
        	var t = this;
        	ed = t.ed;
            p = e;
            if (!(p.nodeName.toLowerCase()=="p")) 
            	return false;
            return true;
        },
        

    /**
         * Returns information about the plugin as a name/value array.
         * The current keys are longname, author, authorurl, infourl and version.
         *
         * @return {Object} Name/value array containing information about the plugin.
         */
        getInfo : function() {
            return {
                longname : 'ACT Alliance quote plugin',
                author : 'Fry-It',
                authorurl : 'http://fry-it.com',
                infourl : 'http://plone.org/products/tinymce',
                version : "1.0"
            };
        }
    });

    // Register plugin
    tinymce.PluginManager.add('quote', tinymce.plugins.Quote);
})();