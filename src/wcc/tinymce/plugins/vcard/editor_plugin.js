/**
 * @author Artur Konstanczak
 * @copyright Copyright ï¿½ 2009, Fry-It, All rights reserved.
 */

//  -- example content generated by this plugin --
//  


// <div class="vcard">
//     <img width="90" alt="Sonali Fernando" src="http://act.local/portal_memberdata/portraits/sof-40actalliance.org">
//     <div class="info">
//         <h5 class="fn"> Sonali Fernando </h5>
//         <p>
//             <span class="role">Head of Communications</span>
//             at
//             <span class="org">ACT Secretariat</span>
//         </p>
//         <p>
//             <span class="tel">+41 22 791 6039</span>
//             <br>
//             <span class="link-mailto">
//                 <a class="email" href="mailto:sof@actalliance.org"> Email Sonali Fernando </a>
//             </span>
//         </p>
//     </div>
// </div>

(function() {
    // Load plugin specific language pack
    // tinymce.PluginManager.requireLangPack('flags');

    tinymce.create('tinymce.plugins.VCard', {

        _previousNode : null,

        /**
         * Initializes the plugin, this will be executed after the plugin has 
         * been created. This call is done before the editor instance has
         * finished it's initialization so use the onInit event
         * of the editor instance to intercept that event.
         *
         * @param {tinymce.Editor} ed Editor instance that the plugin is 
         * 		initialized in.
         * @param {string} url Absolute URL to where the plugin is located.
         */
        init : function(ed, url) 
        {
            var t = this;
            t.ed = ed
            t.url = url

            // Register commands
            ed.addCommand('mceInsertVCard', function() 
            {
                t._execCommand();
            });

            // Register image caption button
            ed.addButton('vcard', 
            {
                title : 'User vard',
                cmd : 'mceInsertVCard',
                image : url + '/img/vcard.gif'
            });

            ed.onNodeChange.add(this._nodeChange, this);
            ed.onKeyDown.add(this._keyDown, this);
        },

        _execCommand : function() 
        {
        	var t = this;
        	ed = t.ed;
        	url = t.url;
        	
            sel = ed.selection.getNode();
            
            /*
            if (sel && sel.tagName.toLowerCase()=="body")
            {
            	b = ed.selection.getBookmark();
            }
            */
            
            par = t._getParentNode(sel, ["p","h1","h2","h3","h4"]);
             // insert only if you are inside paragraph or headings and doesn't have 'div' parent
            if (par && !t._getParentNode(par,["div"]))  
            {
                b = ed.selection.getBookmark();
                
                divVcard = ed.dom.create('div',
	            	{
	            		'class':'vcard'
	            	});

	            imgVcard = ed.dom.create('img', 
	                {
	                    'width':'90',
	                    'alt':'Profile photo',
	                    'src':'/++resource++act.tinymce.plugins/vcard/img/dummy.gif'
    	            });
	            
	            divInfo = ed.dom.create('div',{'class':'info'});
	                
	            h5 = ed.dom.create('h5',{'class':'fn'}, "Name");
	                
	            p1 = ed.dom.create('p');
	            
	            span_role = ed.dom.create('span',{'class':'role'}, 'Role');
	            span_at = ed.dom.create('span',{}, ' at ');
	            span_org = ed.dom.create('span',{'class':'org'}, 'Organisation');
	            
	            p2 = ed.dom.create('p');
	            
	            span_tel = ed.dom.create('span',{'class':'tel'}, '+41xxxxx');
	            ebr = ed.dom.create('br',{});
	            span_mail = ed.dom.create('span',{'class':'link-mailto'});
	            a_mail = ed.dom.create('a',{'class':'email','href':'mailto:#'}, 'Email name@server');
	            
                p1.appendChild(span_role);
                p1.appendChild(span_at);
                p1.appendChild(span_org);
                
                p2.appendChild(span_tel);
                p2.appendChild(ebr);
                span_mail.appendChild(a_mail);
                p2.appendChild(span_mail);

                divInfo.appendChild(h5);
                divInfo.appendChild(p1);
                divInfo.appendChild(p2);
                
                divVcard.appendChild(imgVcard);
                divVcard.appendChild(divInfo);
                
                sel.parentNode.insertBefore(divVcard, sel);
                ed.selection.moveToBookmark(b);
            }
        },
        
        _keyDown : function(ed, e) 
        {
            if (e.keyCode == 46) 
            {
                var n = ed.selection.getNode();
                if (n && n.nodeName.toLowerCase()=="img")
                {
                    var d = this._getParentNode(n, ["div"]);
                    if (d)
                    {
                        ed.dom.remove(d); 
                        // if no cancelled FF deleting parent content
                        tinymce.dom.Event.cancel(e);
                    }
                }          
            }
        },

        _nodeChange : function(ed, cm, n) 
        {
            // Check if active editor
            if (tinyMCE.activeEditor.id != ed.id) 
              return;
            // Set button state
            cm.setDisabled('vcard', this._getParentNode(n, ["div"]));
        },

        _inArray : function(s, a) 
        {
            for (i=0; i<a.length; i++)
            	if (s == a[i]) 
            		return true;
            return false;
        },

        _getParentNode : function(e, a) 
        {
            a.push("body");
            p = e;
            while (!this._inArray(p.nodeName.toLowerCase(), a)) 
            	p = p.parentNode;
            if (p.nodeName.toLowerCase() == "body") 
            	return false;
            else 
            	return p;
        },
        

    /**
         * Returns information about the plugin as a name/value array.
         * The current keys are longname, author, authorurl, infourl and version.
         *
         * @return {Object} Name/value array containing information about the plugin.
         */
        getInfo : function() {
            return {
                longname : 'ACT Alliance vcard plugin',
                author : 'Fry-It',
                authorurl : 'http://fry-it.com',
                infourl : 'http://plone.org/products/tinymce',
                version : "1.0"
            };
        }
    });

    // Register plugin
    tinymce.PluginManager.add('vcard', tinymce.plugins.VCard);
})();