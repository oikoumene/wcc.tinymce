/**
 * @author Artur Konstanczak
 * @copyright Copyright ï¿½ 2009, Fry-It, All rights reserved.
 */

//  -- example content generated by this plugin --
//  
//  <div class="article-meta">
//  
//    <p class="image">
//    	place for image
// 	  </p>
// 
//    <p class="image-credit">Image description
//       <br />
//       <span class="discreet-small">Photo: ACT Alliance</span>
//    </p>
//
//    
//  </div>

(function() {
    // Load plugin specific language pack
    // tinymce.PluginManager.requireLangPack('flags');

    tinymce.create('tinymce.plugins.ImageCaption', {

        _previousNode : null,

        /**
         * Initializes the plugin, this will be executed after the plugin has 
         * been created. This call is done before the editor instance has
         * finished it's initialization so use the onInit event
         * of the editor instance to intercept that event.
         *
         * @param {tinymce.Editor} ed Editor instance that the plugin is 
         * 		initialized in.
         * @param {string} url Absolute URL to where the plugin is located.
         */
        init : function(ed, url) 
        {
            var t = this;
            t.ed = ed
            t.url = url

            // Register commands
            ed.addCommand('mceInsertImageCaption', function() 
            {
                t._execCommand();
            });

            // Register image caption button
            ed.addButton('imagecaption', 
            {
                title : 'Image caption (Right)',
                cmd : 'mceInsertImageCaption',
                image : url + '/img/imagecaption.gif'
            });

            ed.onNodeChange.add(this._nodeChange, this);
            ed.onKeyDown.add(this._keyDown, this);
        },

        _execCommand : function() 
        {
        	var t = this;
        	ed = t.ed;
        	url = t.url;
        	
            sel = ed.selection.getNode();
            
            /*
            if (sel && sel.tagName.toLowerCase()=="body")
            {
            	b = ed.selection.getBookmark();
            }
            */
            
            par = t._getParentNode(sel, ["p","h1","h2","h3","h4"]);
             // insert only if you are inside paragraph or headings and doesn't have 'div' parent
            if (par && !t._getParentNode(par,["div"]))  
            {
                b = ed.selection.getBookmark();
            	
                divArticleMeta = ed.dom.create('div',
	            	{
	            		'class':'imagecaption imagecaptionright'
	            	});
                divArticleMeta_pImage = ed.dom.create('p',
    	            {
    	            		'class':'image'
    	            });
                imgArticleMeta_pImageNode = ed.dom.create('img',
                    {
                            'class':'image-inline',
                            'src': '++resource++wcc.tinymce/imgplaceholder.png'
                    });
                divArticleMeta_pImageCredit = ed.dom.create('p',
	            	{
	            		'class':'image-credit'
	            	},
	            	'Image description');
                divArticleMeta_pImageCredit_br = ed.dom.create('br')
                divArticleMeta_pImageCredit_span = ed.dom.create('span',
    	            	{
    	            		'class':'discreet-small'
    	            	},
    	            	'Photo: John Doe');
                
                divArticleMeta_pImageCredit.appendChild(divArticleMeta_pImageCredit_br);
                divArticleMeta_pImageCredit.appendChild(divArticleMeta_pImageCredit_span);
                divArticleMeta_pImage.appendChild(imgArticleMeta_pImageNode);
                divArticleMeta.appendChild(divArticleMeta_pImage);
                divArticleMeta.appendChild(divArticleMeta_pImageCredit);
                
                sel.parentNode.insertBefore(divArticleMeta, sel);
                ed.selection.moveToBookmark(b);
            }
        },
        
        _keyDown : function(ed, e) 
        {
            if (e.keyCode == 46) 
            {
                var n = ed.selection.getNode();
                if (n && n.nodeName.toLowerCase()=="img")
                {
                    var d = this._getParentNode(n, ["div"]);
                    if (d)
                    {
                        ed.dom.remove(d); 
                        // if no cancelled FF deleting parent content
                        tinymce.dom.Event.cancel(e);
                    }
                }          
            }
        },

        _nodeChange : function(ed, cm, n) 
        {
            // Check if active editor
            if (tinyMCE.activeEditor.id != ed.id) 
              return;
            // Set button state
            cm.setDisabled('imagecaption', this._getParentNode(n, ["div"]));
        },

        _inArray : function(s, a) 
        {
            for (i=0; i<a.length; i++)
            	if (s == a[i]) 
            		return true;
            return false;
        },

        _getParentNode : function(e, a) 
        {
            a.push("body");
            p = e;
            while (!this._inArray(p.nodeName.toLowerCase(), a)) 
            	p = p.parentNode;
            if (p.nodeName.toLowerCase() == "body") 
            	return false;
            else 
            	return p;
        },
        

    /**
         * Returns information about the plugin as a name/value array.
         * The current keys are longname, author, authorurl, infourl and version.
         *
         * @return {Object} Name/value array containing information about the plugin.
         */
        getInfo : function() {
            return {
                longname : 'ACT Alliance image caption plugin',
                author : 'Fry-It',
                authorurl : 'http://fry-it.com',
                infourl : 'http://plone.org/products/tinymce',
                version : "1.0"
            };
        }
    });

    // Register plugin
    tinymce.PluginManager.add('imagecaption', tinymce.plugins.ImageCaption);
})();
